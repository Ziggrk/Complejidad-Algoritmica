from flask import Flask, jsonify, request
import networkx as nx
import matplotlib.pyplot as plt
import random
import numpy as np

app = Flask(__name__)

# ALGORITMOS CLAVES
def camino_mas_corto(graph, source, weight='weight'):

    distances = {node: float('inf') for node in graph.nodes}
    distances[source] = 0
    visited = set()


    while visited != set(graph.nodes): #Basicamente mientras no se hayan visitado todos los nodos
        current_node = None
        #Se verifica cual e es el m√°s corto y se pone como current node
        for node in graph.nodes:
            if node not in visited and (current_node is None or distances[node] < distances[current_node]):
                current_node = node

        visited.add(current_node)
        neighbors = set(graph[current_node]) - visited
        for neighbor in neighbors:
            potential = distances[current_node] + graph[current_node][neighbor].get(weight, 1)
            if potential < distances[neighbor]:
                distances[neighbor] = potential

    return distances
def haversine(lon1, lat1, lon2, lat2):
    
    
    lon1 = np.radians(float(lon1))
    lat1 = np.radians(float(lat1))
    lon2 = np.radians(float(lon2))
    lat2 = np.radians(float(lat2))

    r = 6371
    
    
    dlon = np.subtract(lon2, lon1)
    dlat = np.subtract(lat2, lat1)

    a = np.add(np.power(np.sin(np.divide(dlat, 2)), 2),
               np.multiply(np.cos(lat1),
                           np.multiply(np.cos(lat2),
                                       np.power(np.sin(np.divide(dlon, 2)), 2))
                           )
              )
    c = np.multiply(2, np.arcsin(np.sqrt(a)))

    return c*r

# DATOS PARA USAR
nodes = [
    (-12.088458678552852, -76.99995413516139),
    (-12.090380562754838, -76.99966032710414),
    (-12.092966168683475, -76.99931586248526),
    (-12.088378443303547, -76.99937003526539),
    (-12.08826178845815, -76.99876807584465),
    (-12.08822301245964, -76.99832195365843),
    (-12.088148691780125, -76.99778660703494),
    (-12.088056530949354, -76.99720403754591),
    (-12.087968546211531, -76.99656132430854),
    (-12.089675534451413, -76.9991519521514),
    (-12.089551777094766, -76.99857450208236),
    (-12.089497633233227, -76.99811570613711),
    (-12.089458959039707, -76.99760153826745),
    (-12.090308175716393, -76.99907571953004),
    (-12.090245174257388, -76.99849417959894),
    (-12.090082510227436, -76.99750638496573),
    (-12.089992243978523, -76.99690634527937),
    (-12.089901977699176, -76.99634323111216),
    (-12.091471281814615, -76.99893086822658),
    (-12.091381614578621, -76.99832334463916),
    (-12.09212136837659, -76.99887355468059),
    (-12.091673032985709, -76.99729170081149),
    (-12.092714502764341, -76.99873886670235),
    (-12.09226863928874, -76.99720467799904),
    (-12.092197551760778, -76.99660251434683),
    (-12.092167457482644, -76.99596805144829),

]
edges = [
    ((-12.088458678552852, -76.99995413516139), (-12.088378443303547, -76.99937003526539)),
    ((-12.088458678552852, -76.99995413516139), (-12.090380562754838, -76.99966032710414)),
    ((-12.088378443303547, -76.99937003526539), (-12.08826178845815, -76.99876807584465)),
    ((-12.088378443303547, -76.99937003526539), (-12.089675534451413, -76.9991519521514)),
    ((-12.08826178845815, -76.99876807584465), (-12.08822301245964, -76.99832195365843)),
    ((-12.08826178845815, -76.99876807584465), (-12.089551777094766, -76.99857450208236)),
    ((-12.08822301245964, -76.99832195365843), (-12.088148691780125, -76.99778660703494)),
    ((-12.08822301245964, -76.99832195365843), (-12.089497633233227, -76.99811570613711)),
    ((-12.088148691780125, -76.99778660703494), (-12.089458959039707, -76.99760153826745)),
    ((-12.088148691780125, -76.99778660703494), (-12.088056530949354, -76.99720403754591)),
    ((-12.088056530949354, -76.99720403754591), (-12.087968546211531, -76.99656132430854)),
    ((-12.089675534451413, -76.9991519521514), (-12.089551777094766, -76.99857450208236)),
    ((-12.089551777094766, -76.99857450208236), (-12.089497633233227, -76.99811570613711)),
    ((-12.089497633233227, -76.99811570613711), (-12.089458959039707, -76.99760153826745)),
    ((-12.090308175716393, -76.99907571953004), (-12.090380562754838, -76.99966032710414)),
    ((-12.090308175716393, -76.99907571953004), (-12.090245174257388, -76.99849417959894)),
    ((-12.090245174257388, -76.99849417959894), (-12.090082510227436, -76.99750638496573)),
    ((-12.090082510227436, -76.99750638496573), (-12.089992243978523, -76.99690634527937)),
    ((-12.089992243978523, -76.99690634527937), (-12.089901977699176, -76.99634323111216)),
    ((-12.090308175716393, -76.99907571953004), (-12.089675534451413, -76.9991519521514)),
    ((-12.090082510227436, -76.99750638496573), (-12.089458959039707, -76.99760153826745)),
    ((-12.089992243978523, -76.99690634527937), (-12.088056530949354, -76.99720403754591)),
    ((-12.089901977699176, -76.99634323111216), (-12.087968546211531, -76.99656132430854)),
    ((-12.091471281814615, -76.99893086822658), (-12.091381614578621, -76.99832334463916)),
    ((-12.091381614578621, -76.99832334463916), (-12.090245174257388, -76.99849417959894)),
    ((-12.091471281814615, -76.99893086822658), (-12.090308175716393, -76.99907571953004)),
    ((-12.09212136837659, -76.99887355468059), (-12.091673032985709, -76.99729170081149)),
    ((-12.091673032985709, -76.99729170081149), (-12.090082510227436, -76.99750638496573)),
    ((-12.09212136837659, -76.99887355468059), (-12.091471281814615, -76.99893086822658)),
    ((-12.092714502764341, -76.99873886670235), (-12.092966168683475, -76.99931586248526)),
    ((-12.092714502764341, -76.99873886670235), (-12.09212136837659, -76.99887355468059)),
    ((-12.09226863928874, -76.99720467799904), (-12.091673032985709, -76.99729170081149)),
    ((-12.09226863928874, -76.99720467799904), (-12.092197551760778, -76.99660251434683)),
    ((-12.092197551760778, -76.99660251434683), (-12.089992243978523, -76.99690634527937)),
    ((-12.092197551760778, -76.99660251434683), (-12.092167457482644, -76.99596805144829)),
    ((-12.092167457482644, -76.99596805144829), (-12.089901977699176, -76.99634323111216)),
    ((-12.092966168683475, -76.99931586248526), (-12.090380562754838, -76.99966032710414)),
    ((-12.092714502764341, -76.99873886670235), (-12.09226863928874, -76.99720467799904)),
]

# CREAR GRAFO
G = nx.Graph()
G.add_nodes_from(nodes)
G.add_edges_from(edges)
for edge in edges:
    node1, node2 = edge
    lat1, lon1 = node1
    lat2, lon2 = node2
    weight = haversine(lat1, lon1, lat2, lon2)
    G.add_edge(node1, node2, weight=weight)

@app.route('/')
def bienvenida():
    return "Bienvenido este es un backend para complejidad :)"

@app.route('/coordinates', methods=['POST'])
def closenessAlgorithm():
    longitudes = []
    latitudes = []
    data = request.get_json()
    for item in data:
        latitudes.append(float(item.get('latitude')))
        longitudes.append(float(item.get('longitude')))
    
    targets = dict()
    word = 65

    for lat, lon in zip(latitudes, longitudes):
        key = chr(word)
        targets[key] = (lat, lon)
        word += 1  

    closeness_centrality = {}

    for node in targets:
        total_distance = 0
        shortest_path_length = camino_mas_corto(G, targets[node], weight='weight')
        for _node in G.nodes:
            total_distance+=shortest_path_length[_node]
        closeness_centrality[node] = 1 / total_distance

    closest_node = None

    for node in targets:
        if closest_node is None or closeness_centrality[closest_node] < closeness_centrality[node]:
            closest_node = node

    return jsonify(targets[closest_node]), 201

if __name__ ==  '__main__':
    app.run(debug=True)